# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

# service: my-cognito-project
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "3"

# provider:
#   name: aws
#   runtime: nodejs18.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

# functions:
#   hello:
#     handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
service: my-cognito-service

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1 # or your desired region
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource: "arn:aws:dynamodb:us-east-1:730335246533:table/UserHomeThingGroupData"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:730335246533:table/UserHomeThingGroupData"  
    - Effect: Allow
      Action:
        - iot:CreateKeysAndCertificate
        - iot:AttachThingPrincipal
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:GetObject
      Resource: "arn:aws:s3:::dataofca/MotionSensor.cert.pem" 
    - Effect: Allow
      Action:
        - cognito-idp:ListUserPoolClients
        - cognito-idp:AdminGetUser
        - cognito-idp:initiateAuth        
      Resource: "arn:aws:cognito-idp:us-east-1:730335246533:userpool/*"
    - Effect: Allow
      Action:
        - iot:CreateThingGroup
        - iot:CreateThing
        - iot:AddThingToThingGroup
        - iot:Publish
      Resource: "*"
    - Effect: Allow
      Action:
        - ses:VerifyEmailIdentity
        - "ses:SendEmail"
        - "ses:SendRawEmail"        
      Resource: "*"      
    - Effect: Allow
      Action: 
        - cloudformation:DescribeStacks
      Resource: 
        - "arn:aws:cloudformation:us-east-1:730335246533:stack/my-cognito-service-dev/*"      
functions:
  registerUser:
    handler: handler.registerUser
    events:
      - http:
          path: register
          method: post
          cors: true

  publishSensorSignalToMQQT:
    handler: handler.publishSensorSignalToMQQT
    events:
      - http:
          path: publish-to-iot
          method: post
          cors: true

  subscribeTheMotionSensorFromMQQT:
    handler: handler.subscribeTheMotionSensorFromMQQT
    events:
      - iot:
          sql: "SELECT * FROM 'home/groups/+/things/+/status'"   

  subscribeTheLightBulbFromMQQT:
    handler: handler.subscribeTheLightBulbFromMQQT
    events:
      - iot:
          sql: "SELECT * FROM 'home/groups/+/things/+/status'"  

  loginUsingCognito:
    handler: handler.loginUsingCognito
    events:
      - http:
          path: signIn
          method: post
          cors: true
          
  goingForHoliday:
    handler: handler.goingForHoliday
    events:
      - http:
          path: holiday
          method: post
          cors: true          

resources:
  Resources:
    UserHomeThingGroupData:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserHomeThingGroupData
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S             
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    MyUserByUsingServerless:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: MyUserByUsingServerless
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: OFF
        EmailVerificationSubject: Verify your email for our app
        EmailVerificationMessage: Please click the link below to verify your email address. {####}
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        Schema:
          - Name: email
            Required: true
            AttributeDataType: String
          - Name: given_name
            Required: true
            AttributeDataType: String
          - Name: address
            Required: true
            AttributeDataType: String
          - Name: gender
            Required: true
            AttributeDataType: String
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false

    MyUserByUsingServerlessClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: my-cognito-service-dev
        UserPoolId:
          Ref: MyUserByUsingServerless
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
                                  
plugins:
  - serverless-offline # for local testing
